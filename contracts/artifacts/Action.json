{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeTokenAsset(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getActionDetails()(uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeMinDonationAmount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "donate(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dispense(uint64,string,uint64,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "recollect(address,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "tokenAsset": {
          "type": "uint64",
          "key": "ta"
        },
        "goal": {
          "type": "uint64",
          "key": "g"
        },
        "totalDonations": {
          "type": "uint64",
          "key": "td"
        },
        "startDate": {
          "type": "uint64",
          "key": "sd"
        },
        "endDate": {
          "type": "uint64",
          "key": "ed"
        },
        "minDonationAmount": {
          "type": "uint64",
          "key": "mda"
        },
        "availableBalance": {
          "type": "uint64",
          "key": "ab"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 7
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Action",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "startDate",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "endDate",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "goal",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "changeTokenAsset",
        "args": [
          {
            "name": "newTokenAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getActionDetails",
        "args": [],
        "desc": "",
        "returns": {
          "type": "(uint64,uint64,uint64,uint64)",
          "desc": ""
        }
      },
      {
        "name": "changeMinDonationAmount",
        "args": [
          {
            "name": "newMinDonationAmount",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "donate",
        "args": [
          {
            "name": "donation",
            "type": "axfer",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "dispense",
        "args": [
          {
            "name": "amount",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "description",
            "type": "string",
            "desc": ""
          },
          {
            "name": "id",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "transferToken",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "recollect",
        "args": [
          {
            "name": "receiver",
            "type": "address",
            "desc": ""
          },
          {
            "name": "transferToken",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}