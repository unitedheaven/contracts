#pragma version 9

// This TEAL was generated by TEALScript v0.61.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// createApplication()void
abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

createApplication:
	proto 0 0

	// contracts/action.algo.ts:28
	// this.tokenAsset.value = Asset.zeroIndex
	byte 0x7461 // "ta"
	int 0
	app_global_put

	// contracts/action.algo.ts:29
	// this.goal.value = 0
	byte 0x67 // "g"
	int 0
	app_global_put

	// contracts/action.algo.ts:30
	// this.totalDonations.value = 0
	byte 0x7464 // "td"
	int 0
	app_global_put

	// contracts/action.algo.ts:31
	// this.availableBalance.value = 0
	byte 0x6162 // "ab"
	int 0
	app_global_put

	// contracts/action.algo.ts:32
	// this.startDate.value = 0
	byte 0x7364 // "sd"
	int 0
	app_global_put

	// contracts/action.algo.ts:33
	// this.endDate.value = 0
	byte 0x6564 // "ed"
	int 0
	app_global_put

	// contracts/action.algo.ts:36
	// this.minDonationAmount.value = 10000
	byte 0x6d6461 // "mda"
	int 10000
	app_global_put
	retsub

doAxfer:
	proto 3 0

	// contracts/action.algo.ts:40
	// sendAssetTransfer({
	//             assetReceiver: receiver,
	//             xferAsset: asset,
	//             assetAmount: amount,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/action.algo.ts:41
	// assetReceiver: receiver
	frame_dig -1 // receiver: account
	itxn_field AssetReceiver

	// contracts/action.algo.ts:42
	// xferAsset: asset
	frame_dig -2 // asset: asset
	itxn_field XferAsset

	// contracts/action.algo.ts:43
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

doOptIn:
	proto 1 0

	// contracts/action.algo.ts:48
	// this.doAxfer(this.app.address, asset, 0)
	int 0
	frame_dig -1 // asset: asset
	global CurrentApplicationAddress
	callsub doAxfer
	retsub

isGovernance:
	proto 1 1

	// contracts/action.algo.ts:53
	// return sender === addr('KTFB3FYITSXK7AMABHBME2DTHG37W32O72B3LQIWNTLELCKQYOFUNP2Y5E');
	frame_dig -1 // sender: address
	addr KTFB3FYITSXK7AMABHBME2DTHG37W32O72B3LQIWNTLELCKQYOFUNP2Y5E
	==
	retsub

// bootstrap(uint64,uint64,uint64)void
abi_route_bootstrap:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// goal: uint64
	txna ApplicationArgs 3
	btoi

	// endDate: uint64
	txna ApplicationArgs 2
	btoi

	// startDate: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrap(uint64,uint64,uint64)void
	callsub bootstrap
	int 1
	return

bootstrap:
	proto 4 0

	// contracts/action.algo.ts:61
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/action.algo.ts:64
	// assert(this.tokenAsset.value === Asset.zeroIndex)
	byte 0x7461 // "ta"
	app_global_get
	int 0
	==
	assert

	// contracts/action.algo.ts:66
	// assert(startDate < endDate)
	frame_dig -1 // startDate: uint64
	frame_dig -2 // endDate: uint64
	<
	assert

	// contracts/action.algo.ts:67
	// assert(endDate > globals.latestTimestamp)
	frame_dig -2 // endDate: uint64
	global LatestTimestamp
	>
	assert

	// contracts/action.algo.ts:68
	// assert(goal > 0)
	frame_dig -3 // goal: uint64
	int 0
	>
	assert

	// contracts/action.algo.ts:71
	// this.startDate.value = startDate
	byte 0x7364 // "sd"
	frame_dig -1 // startDate: uint64
	app_global_put

	// contracts/action.algo.ts:72
	// this.endDate.value = endDate
	byte 0x6564 // "ed"
	frame_dig -2 // endDate: uint64
	app_global_put

	// contracts/action.algo.ts:73
	// this.goal.value = goal
	byte 0x67 // "g"
	frame_dig -3 // goal: uint64
	app_global_put

	// contracts/action.algo.ts:76
	// tokenAsset = Asset.fromID(10458941)
	int 10458941
	frame_bury -4 // tokenAsset: asset

	// contracts/action.algo.ts:81
	// this.tokenAsset.value = tokenAsset
	byte 0x7461 // "ta"
	int 10458941 // tokenAsset: asset
	app_global_put
	retsub

// changeTokenAsset(asset)void
abi_route_changeTokenAsset:
	// newTokenAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute changeTokenAsset(asset)void
	callsub changeTokenAsset
	int 1
	return

changeTokenAsset:
	proto 1 0

	// contracts/action.algo.ts:87
	// this.doOptIn(newTokenAsset)
	frame_dig -1 // newTokenAsset: asset
	callsub doOptIn

	// contracts/action.algo.ts:88
	// this.tokenAsset.value = newTokenAsset
	byte 0x7461 // "ta"
	frame_dig -1 // newTokenAsset: asset
	app_global_put
	retsub

// changeMinDonationAmount(uint64)void
abi_route_changeMinDonationAmount:
	// newMinDonationAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeMinDonationAmount(uint64)void
	callsub changeMinDonationAmount
	int 1
	return

changeMinDonationAmount:
	proto 1 0

	// contracts/action.algo.ts:92
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/action.algo.ts:93
	// this.minDonationAmount.value = newMinDonationAmount
	byte 0x6d6461 // "mda"
	frame_dig -1 // newMinDonationAmount: uint64
	app_global_put
	retsub

// donate(axfer)void
abi_route_donate:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// donation: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute donate(axfer)void
	callsub donate
	int 1
	return

donate:
	proto 2 0

	// contracts/action.algo.ts:97
	// assert(globals.latestTimestamp < this.endDate.value)
	global LatestTimestamp
	byte 0x6564 // "ed"
	app_global_get
	<
	assert

	// contracts/action.algo.ts:98
	// assert(this.goal.value > this.totalDonations.value)
	byte 0x67 // "g"
	app_global_get
	byte 0x7464 // "td"
	app_global_get
	>
	assert

	// contracts/action.algo.ts:99
	// verifyTxn(donation, {
	//             assetAmount: { greaterThan: this.minDonationAmount.value },
	//             assetReceiver: this.app.address,
	//             sender: this.txn.sender,
	//             xferAsset: this.tokenAsset.value
	//         })
	// verify assetAmount
	frame_dig -1 // donation: axfer
	gtxns AssetAmount
	byte 0x6d6461 // "mda"
	app_global_get
	>
	assert

	// verify assetReceiver
	frame_dig -1 // donation: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -1 // donation: axfer
	gtxns Sender
	txn Sender
	==
	assert

	// verify xferAsset
	frame_dig -1 // donation: axfer
	gtxns XferAsset
	byte 0x7461 // "ta"
	app_global_get
	==
	assert

	// if0_condition
	// contracts/action.algo.ts:108
	// this.donations(this.txn.sender).exists
	txn Sender
	box_len
	swap
	pop
	bz if0_else

	// if0_consequent
	// contracts/action.algo.ts:109
	// currentDonation = this.donations(this.txn.sender).value
	txn Sender
	box_get
	assert
	btoi
	frame_bury -2 // currentDonation: uint64
	b if0_end

if0_else:
	// contracts/action.algo.ts:111
	// currentDonation = 0
	int 0
	frame_bury -2 // currentDonation: uint64

if0_end:
	// contracts/action.algo.ts:114
	// this.donations(this.txn.sender).value = currentDonation + donation.assetAmount
	txn Sender
	int 0 // currentDonation: uint64
	frame_dig -1 // donation: axfer
	gtxns AssetAmount
	+
	itob
	box_put

	// contracts/action.algo.ts:117
	// this.totalDonations.value = this.totalDonations.value + donation.assetAmount
	byte 0x7464 // "td"
	byte 0x7464 // "td"
	app_global_get
	frame_dig -1 // donation: axfer
	gtxns AssetAmount
	+
	app_global_put

	// contracts/action.algo.ts:118
	// this.availableBalance.value = this.availableBalance.value + donation.assetAmount
	byte 0x6162 // "ab"
	byte 0x6162 // "ab"
	app_global_get
	frame_dig -1 // donation: axfer
	gtxns AssetAmount
	+
	app_global_put
	retsub

// dispense(asset,uint64,string,uint64)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_dispense:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// transferToken: asset
	txna ApplicationArgs 4
	btoi
	txnas Assets

	// id: uint64
	txna ApplicationArgs 3
	btoi

	// description: string
	txna ApplicationArgs 2
	extract 2 0

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute dispense(asset,uint64,string,uint64)void
	callsub dispense
	int 1
	return

dispense:
	proto 5 0

	// contracts/action.algo.ts:123
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/action.algo.ts:124
	// assert(this.availableBalance.value >= amount)
	byte 0x6162 // "ab"
	app_global_get
	frame_dig -1 // amount: uint64
	>=
	assert

	// contracts/action.algo.ts:125
	// assert(globals.latestTimestamp < this.endDate.value + TWO_WEEKS_IN_SECONDS)
	global LatestTimestamp
	byte 0x6564 // "ed"
	app_global_get
	int 1209600
	+
	<
	assert

	// contracts/action.algo.ts:126
	// this.doAxfer(this.txn.sender, this.tokenAsset.value, amount)
	frame_dig -1 // amount: uint64
	byte 0x7461 // "ta"
	app_global_get
	txn Sender
	callsub doAxfer

	// contracts/action.algo.ts:127
	// this.availableBalance.value = this.availableBalance.value - amount
	byte 0x6162 // "ab"
	byte 0x6162 // "ab"
	app_global_get
	frame_dig -1 // amount: uint64
	-
	app_global_put

	// contracts/action.algo.ts:128
	// dispenseRecord: dispenseRecord = {
	//             amount: amount,
	//             description: description
	//         }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x000a // initial head offset
	frame_dig -1 // amount: uint64
	itob
	callsub process_static_tuple_element
	frame_dig -2 // description: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -5 // dispenseRecord: dispenseRecord

	// contracts/action.algo.ts:132
	// this.dispenseRecords(id).value = dispenseRecord
	byte 0x6472 // "dr"
	frame_dig -3 // id: uint64
	itob
	concat
	dup
	box_del
	pop
	frame_dig -5 // dispenseRecord: dispenseRecord
	box_put
	retsub

// recollect(asset,address)void
//
// // recollect remaining funds after 2 weeks of campaign end
abi_route_recollect:
	// transferToken: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute recollect(asset,address)void
	callsub recollect
	int 1
	return

recollect:
	proto 2 0

	// contracts/action.algo.ts:139
	// assert(globals.latestTimestamp > this.endDate.value + TWO_WEEKS_IN_SECONDS)
	global LatestTimestamp
	byte 0x6564 // "ed"
	app_global_get
	int 1209600
	+
	>
	assert

	// contracts/action.algo.ts:140
	// this.doAxfer(receiver, this.tokenAsset.value, this.availableBalance.value)
	byte 0x6162 // "ab"
	app_global_get
	byte 0x7461 // "ta"
	app_global_get
	frame_dig -1 // receiver: address
	callsub doAxfer

	// contracts/action.algo.ts:141
	// this.availableBalance.value = 0
	byte 0x6162 // "ab"
	int 0
	app_global_put
	retsub

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "bootstrap(uint64,uint64,uint64)void"
	method "changeTokenAsset(asset)void"
	method "changeMinDonationAmount(uint64)void"
	method "donate(axfer)void"
	method "dispense(uint64,string,uint64,asset)void"
	method "recollect(address,asset)void"
	txna ApplicationArgs 0
	match abi_route_bootstrap abi_route_changeTokenAsset abi_route_changeMinDonationAmount abi_route_donate abi_route_dispense abi_route_recollect
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub